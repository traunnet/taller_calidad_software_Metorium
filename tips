⚙️ Comandos útiles de Laravel 
🖼️ 📂 Imágenes y almacenamiento

Crea un enlace simbólico entre public/storage y storage/app/public, necesario para acceder a los archivos subidos desde el navegador.

Eliminar carpeta storage existente antes de crear el enlace si es necesario.
php artisan storage:link

🌐 🚀 Servidor local

Inicia el servidor de desarrollo incorporado de Laravel (por defecto en http://127.0.0.1:8000).

php artisan serve

🧱 📜 Migraciones de base de datos

Ejecuta todas las migraciones pendientes para crear o actualizar las tablas en tu base de datos.

php artisan migrate


🛠️ Otros comandos útiles de migraciones:

php artisan migrate:rollback   # Revierte la última migración
php artisan migrate:fresh      # Elimina y vuelve a ejecutar todas las migraciones
php artisan migrate:refresh    # Refresca las migraciones conservando la estructura

🧹 🧰 Limpieza y optimización del sistema
1️⃣ Limpiar caché de la aplicación

Elimina todos los datos almacenados en caché por Laravel.

php artisan cache:clear

2️⃣ Limpiar caché de configuración

Borra el caché generado por config:cache, útil si cambias archivos en /config.

php artisan config:clear

3️⃣ Limpiar caché de rutas

Elimina el caché de rutas generado por route:cache.

php artisan route:clear

4️⃣ Limpiar vistas compiladas

Borra las vistas .blade.php compiladas que están en storage/framework/views.

php artisan view:clear

5️⃣ Limpiar caché de eventos

Elimina los eventos cacheados.

php artisan event:clear

⚡ 🧨 Limpieza total (todo en uno)

Ejecuta todos los comandos de limpieza anteriores en una sola instrucción:

php artisan optimize:clear


🔸 Ideal cuando realizas cambios importantes en configuración, rutas o vistas.

💡 Extras útiles
🔍 Ver la lista completa de comandos disponibles:
php artisan list

🏗️ Crear un controlador:
php artisan make:controller NombreController

📦 Crear un modelo con migración:
php artisan make:model Nombre -m

✨ Recomendación final

Después de limpiar, puedes regenerar las cachés para mejorar el rendimiento:

php artisan config:cache
php artisan route:cache
php artisan view:cache
php artisan event:cache

1. Instalar Dependencias de PHP
Descarga todas las librerías de PHP necesarias definidas en composer.json.

composer install
2. Configurar el Archivo de Entorno
Copia el archivo de ejemplo para crear tu configuración local:

cp .env.example .env
⚠️ IMPORTANTE: Abre el nuevo archivo .env y configura las credenciales de tu base de datos localmente.

# Ejemplo en el archivo .env
DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=nombre_de_tu_db_local
DB_USERNAME=root
DB_PASSWORD=

3. Generar la Clave de Aplicación (App Key)
Esta clave es vital para la seguridad (encriptación de sesiones, cookies, etc.). Se genera automáticamente y se inserta en el archivo .env.

php artisan key:generate

4. Ejecutar las Migraciones de Base de Datos
Crea la estructura de tablas necesaria en la base de datos configurada en el paso 2.

php artisan migrate